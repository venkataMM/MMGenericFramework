// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9 (swiftlang-5.9.0.128.108 clang-1500.0.40.1)
// swift-module-flags: -target arm64-apple-ios12.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MMGenericFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import CommonCrypto
import CoreTelephony
import Foundation
@_exported import MMGenericFramework
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public class MMAssetInformation : ObjectiveC.NSObject, Swift.Codable {
  public var assetURL: Swift.String!
  public var assetID: Swift.String?
  public var assetName: Swift.String?
  public var videoId: Swift.String?
  public var metafileURL: Foundation.URL?
  public var customKVPs: [Swift.String : Swift.String]!
  public var contentType: Swift.String?
  public var drmProtection: Swift.String?
  public var episodeNumber: Swift.String?
  public var genre: Swift.String?
  public var season: Swift.String?
  public var seriesTitle: Swift.String?
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?)
  @objc public init(assetURL aURL: Swift.String, assetID aId: Swift.String?, assetName aName: Swift.String?, videoId vId: Swift.String?, contyentType cType: Swift.String? = nil, drmProtection: Swift.String? = nil, episodeNumber eNumber: Swift.String? = nil, genre: Swift.String? = nil, season: Swift.String? = nil, seriesTitle: Swift.String? = nil)
  @objc public func addCustomKVP(_ key: Swift.String, _ value: Swift.String)
  @objc public func setQBRMode(_ mode: MMGenericFramework.MMQBRMode, withMetaURL metaURL: Foundation.URL?)
  @objc public func setContentType(_ cType: Swift.String?)
  @objc public func setDrmProtection(_ drmP: Swift.String?)
  @objc public func setEpisodeNumber(_ eNumber: Swift.String?)
  @objc public func setGenre(_ genre: Swift.String?)
  @objc public func setSeason(_ season: Swift.String?)
  @objc public func setSeriesTitle(_ sTitle: Swift.String?)
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc public class GenericMMWrapper : ObjectiveC.NSObject, MMGenericFramework.MMSmartStreamingObserver {
  @objc public func sessionInitializationCompleted(with status: MMGenericFramework.MMSmartStreamingInitializationStatus, andDescription description: Swift.String!, forCmdWithId cmdId: Swift.Int, nowtilusPermission enableNowtilus: Swift.Bool)
  public func reportCustomMetadata(key: Swift.String, value: Swift.String)
  @objc override dynamic public init()
  @objc deinit
}
public enum ReachabilityErrorMM : Swift.Error {
  case FailedToCreateWithAddress(Darwin.sockaddr_in)
  case FailedToCreateWithHostname(Swift.String)
  case UnableToSetCallback
  case UnableToSetDispatchQueue
}
public let ReachabilityChangedNotificationMM: Foundation.NSNotification.Name
public class ReachabilityMM {
  public typealias NetworkReachable = (MMGenericFramework.ReachabilityMM) -> ()
  public typealias NetworkUnreachable = (MMGenericFramework.ReachabilityMM) -> ()
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: MMGenericFramework.ReachabilityMM.NetworkStatus, b: MMGenericFramework.ReachabilityMM.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var whenReachable: MMGenericFramework.ReachabilityMM.NetworkReachable?
  public var whenUnreachable: MMGenericFramework.ReachabilityMM.NetworkUnreachable?
  public var reachableOnWWAN: Swift.Bool
  public var currentReachabilityString: Swift.String {
    get
  }
  public var currentReachabilityStatus: MMGenericFramework.ReachabilityMM.NetworkStatus {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability)
  convenience public init?(hostname: Swift.String)
  convenience public init?()
  @objc deinit
}
extension MMGenericFramework.ReachabilityMM {
  public func startNotifier() throws
  public func stopNotifier()
  public var isReachable: Swift.Bool {
    get
  }
  public var isReachableViaWWAN: Swift.Bool {
    get
  }
  public var isReachableViaWiFi: Swift.Bool {
    get
  }
  public var description: Swift.String {
    get
  }
}
@objc public class MMRegistrationInformation : ObjectiveC.NSObject {
  public var customerID: Swift.String!
  public var component: Swift.String!
  public var playerName: Swift.String!
  public var domainName: Swift.String?
  public var subscriberID: Swift.String?
  public var hashSubscriberID: Swift.Bool!
  public var subscriberType: Swift.String?
  public var subscriberTag: Swift.String?
  public var playerBrand: Swift.String?
  public var playerModel: Swift.String?
  public var playerVersion: Swift.String?
  @objc public init(customerID cID: Swift.String, playerName pName: Swift.String)
  @objc public func setDomain(_ dName: Swift.String?)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?, hashSubscriberID hashSubID: Swift.Bool)
  @objc public func setSubscriberInformation(subscriberID subsID: Swift.String?, subscriberType subsType: Swift.String?, subscriberTag subsTag: Swift.String?)
  @objc public func setPlayerInformation(brand: Swift.String?, model: Swift.String?, version: Swift.String?)
  @objc public func setComponentName(_ cName: Swift.String?)
  @objc deinit
}
public enum MMOverridableMetrics {
  case Latency, CDN, DurationWatched
  public static func == (a: MMGenericFramework.MMOverridableMetrics, b: MMGenericFramework.MMOverridableMetrics) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension MMGenericFramework.ReachabilityMM.NetworkStatus : Swift.Equatable {}
extension MMGenericFramework.ReachabilityMM.NetworkStatus : Swift.Hashable {}
extension MMGenericFramework.MMOverridableMetrics : Swift.Equatable {}
extension MMGenericFramework.MMOverridableMetrics : Swift.Hashable {}
